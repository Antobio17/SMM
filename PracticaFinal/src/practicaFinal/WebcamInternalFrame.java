/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practicaFinal;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.util.List;

/**
 *
 * @author Antonio Jiménez Rodríguez
 */
public class WebcamInternalFrame extends javax.swing.JInternalFrame {

    /******************************* PROPERTIES ******************************/
    
    private Webcam webcam = null;
    
    /******************************* CONSTRUCTS ******************************/
    
    /**
     * Creates new form WebCamInternalFrame
     * 
     * @param dimension Dimension: Resolución de la webcam.
     */
    private WebcamInternalFrame(Webcam webcam, Dimension dimension) 
    {
        initComponents();
        this.webcam = webcam;
        if (webcam != null) {
            webcam.setViewSize(dimension);
            WebcamPanel visualArea = new WebcamPanel(webcam);
            if (visualArea != null) {
                getContentPane().add(visualArea, BorderLayout.CENTER);
                pack();
            }
        }
        
    }

    /*************************** GETTER AND SETTER ***************************/

    /**
     * Obtiene la propiedad Webcam de la ventana interna.
     * 
     * @return Webcam webcam de la ventana interna.
     */
    public Webcam getWebcam()
    {
        return this.webcam;
    }
    
    /***************************** PUBLIC METHODS ****************************/
    
    /**
     * Metodo que obtiene una instancia de la clase WebcamInternalFrame.
     * 
     * @param webcam Webcam: Webcam a activar.
     * @param dimension Dimension: Resolución de la webcam.
     * 
     * @return WebcamInternalFrame instancia de la clase WebcamInternalFrame.
     */
    public static WebcamInternalFrame getInstance(Webcam webcam,
            Dimension dimension)
    {
        WebcamInternalFrame webcamInternalFrame = new WebcamInternalFrame(
                webcam, dimension
        );
        return (webcamInternalFrame.webcam != null ? webcamInternalFrame : null);
    }
    
    /**
     * Método que obtiene una instantanea del frame actual de la webcam.
     * 
     * @return BufferedImage instantanea del frame actual de la webcam.
     */
    public BufferedImage getImage()
    {
        return webcam != null ? webcam.getImage() : null;
    }
    
    /**
     * Método para obtener las resoluciones disponibles de la webcam.
     * 
     * @return Dimension[] array de resoluciones. 
     */
    public Dimension[] getResolutions()
    {
        return webcam.getViewSizes();
    }
    
    /**
     * Método para obtener todas las webcams.
     * 
     * @return Webcam[] lista de webcams.
     */
    public List<Webcam> getWebcams()
    {
        return Webcam.getWebcams();
    }
    
    /***************************** PRIVARE METHODS ***************************/
    
    /************************** JAVA GENERATED CODE **************************/
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        if(webcam != null){
            webcam.close();
        }
    }//GEN-LAST:event_formInternalFrameClosing


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
